# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp
.cache

# vitepress build output
**/.vitepress/dist

# vitepress cache directory
**/.vitepress/cache

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*
.idea


const deleteComment = async (req, res) => {
    const { photo_id, comment_id } = req.params;
    const userId = req.userId;
    try {
        const photo = await Photo.findById(photo_id);
        if (!photo) {
            return res.status(404).json({ message: "Photo not found" });
        }
        const comment = photo.comments.id(comment_id);
        if (!comment) {
            return res.status(404).json({ message: "Comment not found" });
        }
        / Log debug info (giúp debug khi lỗi)
        / console.log('DEBUG:', {
        /     comment_id,
        /     comment__id: comment._id,
        /     userId,
        /     comment_user_id: comment.user_id
        / });
        / Chỉ cho phép chủ comment xóa
        if (comment.user_id.toString() !== userId.toString()) {
            return res.status(403).json({ message: "Not authorized to delete this comment" });
        }
        / Xóa comment bằng filter (tránh lỗi .remove is not a function)
        photo.comments = photo.comments.filter(
            c => c._id.toString() !== comment_id.toString()
        );
        await photo.save();
        res.status(200).json({ message: "Comment deleted successfully" });
    } catch (error) {
        console.error("Error deleting comment:", error);
        res.status(500).json({ message: "Internal server error" });
    }
};
/ backend/routes/CommentRouter.js
 router.delete('/commentsOfPhoto/:photo_id/:comment_id', protectRoute, deleteComment);
/backend\controllers\comment.controller.js
photo.comments = photo.comments.filter(
  c => c._id.toString() !== comment_id.toString()
);
await photo.save();

/ frontend/src/store/commentStore.js

deleteComment: async (photoId, commentId) => {
    try {
        await axiosInstance.delete(`/comment/commentsOfPhoto/${photoId}/${commentId}`);
        toast.success("Comment deleted!");
        return true;
    } catch (error) {
        toast.error("Failed to delete comment");
        return false;
    }
}


/ File: frontend/src/components/UserPhotos/index.jsx
import { useCommentStore } from "../../store/commentStore";
import { authStore } from "../../store/authStore";
const { authUser } = authStore();
const { deleteComment } = useCommentStore();


{authUser && comment.user._id === authUser._id && (
  <button
    style={{ color: "red", marginLeft: 8, cursor: "pointer", border: "none", background: "none" }}
    onClick={async () => {
      const ok = await deleteComment(photo._id, comment._id);
      if (ok) setPhotos(user);
    }}
  >
    Delete cmt
  </button>
)}


/ delete photo
/  backend/routes/PhotoRouter.js
router.delete('/photos/:photo_id', protectRoute, deletePhoto);
app.use('/photo', photoRouter); // trong backend/index.js

/ backend/controllers/photo.controller.js
const deletePhoto = async (req, res) => {
    const { photo_id } = req.params;
    const userId = req.userId;
    console.log("DELETE PHOTO API CALLED", { photo_id, userId });
    try {
        const photo = await Photo.findById(photo_id);
        if (!photo) {
            return res.status(404).json({ message: "Photo not found" });
        }
        if (photo.user_id.toString() !== userId.toString()) {
            return res.status(403).json({ message: "Not authorized to delete this photo" });
        }
        await photo.deleteOne();
        res.status(200).json({ message: "Photo deleted successfully" });
    } catch (error) {
        console.error("Error deleting photo:", error);
        res.status(500).json({ message: "Internal server error" });
    }
};



/ File: frontend/src/store/photoStore.js

deletePhoto: async (photoId) => {
    try {
        await axiosInstance.delete(`/photo/photos/${photoId}`); // Đúng endpoint
        toast.success("Photo deleted!");
        return true;
    } catch (error) {
        toast.error("Failed to delete photo");
        return false;
    }
}


/frontend/src/components/UserPhotos/index.jsx

{authUser && photo.user_id === authUser._id && (
              <button
                onClick={async () => {
                  const ok = await deletePhoto(photo._id);
                  if (ok) setPhotos(user); // reload lại danh sách ảnh
                }}
              >
                Delete photo
              </button>
            )}